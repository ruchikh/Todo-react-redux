{"ast":null,"code":"import _toConsumableArray from \"/Users/ruchi/Documents/learn/Todo-react-redux/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/ruchi/Documents/learn/Todo-react-redux/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar data = {\n  dataLists: [{\n    Id: Math.random(),\n    Title: \"Water Bottles\",\n    Quantity: \"20\",\n    Description: \"Minaral, Normal, filter\",\n    completed: false\n  }, {\n    Id: Math.random(),\n    Title: \"Juice Bottles\",\n    Quantity: \"50\",\n    Description: \"Apple, orange, grapes, Pineaple\",\n    completed: true\n  }, {\n    Id: Math.random(),\n    Title: \"Oil container\",\n    Quantity: \"50\",\n    Description: \"eatable, petrol\",\n    completed: false\n  }]\n};\nexport default function rootReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : data;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'ADD_TODO':\n      return _objectSpread({}, state, {\n        dataLists: [].concat(_toConsumableArray(state.dataLists), [action.data])\n      });\n\n    case 'REMOVE_TODO':\n      var filteredList = state.dataLists.filter(function (item) {\n        return item.Id !== action.id;\n      });\n      return _objectSpread({}, state, {\n        dataLists: filteredList\n      });\n\n    case 'UPDATE_TODO':\n      var dataLists = state.dataLists;\n\n      for (var i = 0; i > dataLists.length; i++) {\n        if (dataLists[i].Id === action.data.Id) {\n          console.log(dataLists[i], 'check');\n          dataLists[i].Id = action.data.Id;\n          dataLists[i].Description = action.data.Description;\n          dataLists[i].Title = action.data.Title;\n          dataLists[i].Quantity = action.data.Quantity;\n          break;\n        }\n      }\n\n      console.log(dataLists, 'checking');\n      return _objectSpread({}, state, {\n        dataLists: _toConsumableArray(state.dataLists)\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/ruchi/Documents/learn/Todo-react-redux/src/reducers/index.js"],"names":["data","dataLists","Id","Math","random","Title","Quantity","Description","completed","rootReducer","state","action","type","filteredList","filter","item","id","i","length","console","log"],"mappings":";;AAAA,IAAMA,IAAI,GAAG;AACTC,EAAAA,SAAS,EAAE,CACP;AACIC,IAAAA,EAAE,EAAEC,IAAI,CAACC,MAAL,EADR;AAEIC,IAAAA,KAAK,EAAE,eAFX;AAGIC,IAAAA,QAAQ,EAAE,IAHd;AAIIC,IAAAA,WAAW,EAAE,yBAJjB;AAKIC,IAAAA,SAAS,EAAE;AALf,GADO,EAQP;AACIN,IAAAA,EAAE,EAAEC,IAAI,CAACC,MAAL,EADR;AAEIC,IAAAA,KAAK,EAAE,eAFX;AAGIC,IAAAA,QAAQ,EAAE,IAHd;AAIIC,IAAAA,WAAW,EAAE,iCAJjB;AAKIC,IAAAA,SAAS,EAAE;AALf,GARO,EAeP;AACIN,IAAAA,EAAE,EAAEC,IAAI,CAACC,MAAL,EADR;AAEIC,IAAAA,KAAK,EAAE,eAFX;AAGIC,IAAAA,QAAQ,EAAE,IAHd;AAIIC,IAAAA,WAAW,EAAE,iBAJjB;AAKIC,IAAAA,SAAS,EAAE;AALf,GAfO;AADF,CAAb;AA0BA,eAAe,SAASC,WAAT,GAA2C;AAAA,MAAtBC,KAAsB,uEAAdV,IAAc;AAAA,MAARW,MAAQ;;AACtD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,UAAL;AACI,+BACOF,KADP;AAEIT,QAAAA,SAAS,+BAAMS,KAAK,CAACT,SAAZ,IAAuBU,MAAM,CAACX,IAA9B;AAFb;;AAIJ,SAAK,aAAL;AACI,UAAMa,YAAY,GAAGH,KAAK,CAACT,SAAN,CAAgBa,MAAhB,CAAuB,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACb,EAAL,KAAYS,MAAM,CAACK,EAAvB;AAAA,OAA3B,CAArB;AACA,+BACON,KADP;AAEIT,QAAAA,SAAS,EAAEY;AAFf;;AAIJ,SAAK,aAAL;AAAA,UACYZ,SADZ,GAC0BS,KAD1B,CACYT,SADZ;;AAEI,WAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhB,SAAS,CAACiB,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACvC,YAAIhB,SAAS,CAACgB,CAAD,CAAT,CAAaf,EAAb,KAAoBS,MAAM,CAACX,IAAP,CAAYE,EAApC,EAAwC;AACpCiB,UAAAA,OAAO,CAACC,GAAR,CAAYnB,SAAS,CAACgB,CAAD,CAArB,EAA0B,OAA1B;AACAhB,UAAAA,SAAS,CAACgB,CAAD,CAAT,CAAaf,EAAb,GAAkBS,MAAM,CAACX,IAAP,CAAYE,EAA9B;AACAD,UAAAA,SAAS,CAACgB,CAAD,CAAT,CAAaV,WAAb,GAA2BI,MAAM,CAACX,IAAP,CAAYO,WAAvC;AACAN,UAAAA,SAAS,CAACgB,CAAD,CAAT,CAAaZ,KAAb,GAAqBM,MAAM,CAACX,IAAP,CAAYK,KAAjC;AACAJ,UAAAA,SAAS,CAACgB,CAAD,CAAT,CAAaX,QAAb,GAAwBK,MAAM,CAACX,IAAP,CAAYM,QAApC;AACA;AACH;AACJ;;AACDa,MAAAA,OAAO,CAACC,GAAR,CAAYnB,SAAZ,EAAuB,UAAvB;AACA,+BACOS,KADP;AAEIT,QAAAA,SAAS,qBAAMS,KAAK,CAACT,SAAZ;AAFb;;AAIJ;AACI,aAAOS,KAAP;AA9BR;AAgCH","sourcesContent":["const data = {\n    dataLists: [\n        {\n            Id: Math.random(),\n            Title: \"Water Bottles\",\n            Quantity: \"20\",\n            Description: \"Minaral, Normal, filter\",\n            completed: false,\n        },\n        {\n            Id: Math.random(),\n            Title: \"Juice Bottles\",\n            Quantity: \"50\",\n            Description: \"Apple, orange, grapes, Pineaple\",\n            completed: true,\n        },\n        {\n            Id: Math.random(),\n            Title: \"Oil container\",\n            Quantity: \"50\",\n            Description: \"eatable, petrol\",\n            completed: false,\n        }\n    ],\n};\n\nexport default function rootReducer(state = data, action) {\n    switch (action.type) {\n        case 'ADD_TODO':\n            return {\n                ...state,\n                dataLists: [...state.dataLists, action.data]\n            }\n        case 'REMOVE_TODO':\n            const filteredList = state.dataLists.filter(item => item.Id !== action.id);\n            return {\n                ...state,\n                dataLists: filteredList,\n            }\n        case 'UPDATE_TODO':\n            const { dataLists } = state;\n            for (let i = 0; i > dataLists.length; i++) {\n                if (dataLists[i].Id === action.data.Id) {\n                    console.log(dataLists[i], 'check')\n                    dataLists[i].Id = action.data.Id;\n                    dataLists[i].Description = action.data.Description;\n                    dataLists[i].Title = action.data.Title;\n                    dataLists[i].Quantity = action.data.Quantity;\n                    break;\n                }\n            }\n            console.log(dataLists, 'checking');\n            return {\n                ...state,\n                dataLists: [...state.dataLists],\n            }\n        default:\n            return state\n    }\n}"]},"metadata":{},"sourceType":"module"}