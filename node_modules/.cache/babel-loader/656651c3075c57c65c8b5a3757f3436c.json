{"ast":null,"code":"import _defineProperty from \"/Users/ruchi/Documents/learn/Todo-react-redux/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/ruchi/Documents/learn/Todo-react-redux/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ruchi/Documents/learn/Todo-react-redux/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ruchi/Documents/learn/Todo-react-redux/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ruchi/Documents/learn/Todo-react-redux/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ruchi/Documents/learn/Todo-react-redux/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/ruchi/Documents/learn/Todo-react-redux/src/components/MyTodos.js\";\nimport React, { Component } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport CreateData from \"./CreateData.js\";\nimport DataLists from \"./DataLists.js\";\nimport { connect } from 'react-redux';\nimport { addTodo, removeTodo, updateTodo } from \"../actions/index.js\";\n\nvar MyTodos = /*#__PURE__*/function (_Component) {\n  _inherits(MyTodos, _Component);\n\n  function MyTodos(props) {\n    var _this;\n\n    _classCallCheck(this, MyTodos);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MyTodos).call(this, props));\n\n    _this.handleChange = function (e) {\n      _this.setState(_defineProperty({}, e.target.name, e.target.value));\n    };\n\n    _this.addData = function (e) {\n      e.preventDefault();\n      var _this$state = _this.state,\n          Title = _this$state.Title,\n          Quantity = _this$state.Quantity,\n          completed = _this$state.completed;\n      if (!Title || !Quantity || !Description) return;\n      var todo = {\n        Id: Math.random(),\n        Title: Title,\n        Description: Description,\n        completed: completed\n      };\n\n      _this.props.dispatch(addTodo(todo));\n\n      _this.reset();\n    };\n\n    _this.reset = function () {\n      _this.setState({\n        Title: \"\",\n        Description: \"\"\n      });\n    };\n\n    _this.removeData = function (Id) {\n      _this.props.dispatch(removeTodo(Id));\n    };\n\n    _this.handleUpdate = function (Id) {\n      var dataLists = _this.props.dataLists;\n      var targetObj = dataLists.filter(function (item) {\n        return item.Id === Id;\n      })[0];\n\n      _this.setState({\n        Id: targetObj.Id,\n        Title: targetObj.Title,\n        Description: targetObj.Description,\n        completed: targetObj.completed,\n        isEditing: true\n      });\n    };\n\n    _this.handleCheckbox = function () {\n      _this.setState({\n        completed: !_this.state.completed\n      });\n    };\n\n    _this.saveUpdate = function (e) {\n      e.preventDefault();\n      var _this$state2 = _this.state,\n          Title = _this$state2.Title,\n          Description = _this$state2.Description,\n          Quantity = _this$state2.Quantity,\n          Id = _this$state2.Id;\n      var newData = {\n        Title: Title,\n        Description: Description,\n        Id: Id\n      };\n\n      _this.props.dispatch(updateTodo(newData));\n    };\n\n    _this.state = {\n      Id: null,\n      Title: \"\",\n      Description: \"\",\n      completed: false,\n      isEditing: false\n    };\n    return _this;\n  }\n\n  _createClass(MyTodos, [{\n    key: \"render\",\n    value: function render() {\n      var state = this.state,\n          addData = this.addData,\n          handleChange = this.handleChange,\n          saveUpdate = this.saveUpdate,\n          removeData = this.removeData,\n          handleUpdate = this.handleUpdate,\n          handleCheckbox = this.handleCheckbox,\n          Id = state.Id,\n          Title = state.Title,\n          Description = state.Description,\n          isEditing = state.isEditing,\n          completed = state.completed;\n      var dataLists = this.props.dataLists;\n      return /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        spacing: 0,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        ls: 6,\n        md: 6,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(CreateData, {\n        Id: Id,\n        Title: Title,\n        Description: Description,\n        Quantity: Quantity,\n        addData: addData,\n        handleChange: handleChange,\n        saveUpdate: saveUpdate,\n        isEditing: isEditing,\n        completed: completed,\n        handleCheckbox: handleCheckbox,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        ls: 6,\n        md: 6,\n        sm: 12,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(DataLists, {\n        lists: dataLists,\n        removeData: removeData,\n        handleUpdate: handleUpdate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }\n      })));\n    }\n  }]);\n\n  return MyTodos;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    dataLists: state.dataLists\n  };\n};\n\nexport default connect(mapStateToProps)(MyTodos);","map":{"version":3,"sources":["/Users/ruchi/Documents/learn/Todo-react-redux/src/components/MyTodos.js"],"names":["React","Component","Grid","CreateData","DataLists","connect","addTodo","removeTodo","updateTodo","MyTodos","props","handleChange","e","setState","target","name","value","addData","preventDefault","state","Title","Quantity","completed","Description","todo","Id","Math","random","dispatch","reset","removeData","handleUpdate","dataLists","targetObj","filter","item","isEditing","handleCheckbox","saveUpdate","newData","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport CreateData from \"./CreateData.js\";\nimport DataLists from \"./DataLists.js\";\nimport { connect } from 'react-redux';\nimport { addTodo, removeTodo, updateTodo } from \"../actions/index.js\";\n\nclass MyTodos extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      Id: null,\n      Title: \"\",\n      Description: \"\",\n      completed: false,\n      isEditing: false\n    };\n  }\n\n  handleChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  //To add data to the dataList array\n  addData = e => {\n    e.preventDefault();\n    const { Title, Quantity, completed } = this.state;\n    if (!Title || !Quantity || !Description) return;\n\n    let todo = {\n      Id: Math.random(),\n      Title: Title,\n      Description: Description,\n      completed,\n    }\n    this.props.dispatch(addTodo(todo));\n    this.reset();\n  };\n\n  //To reset the form fields\n  reset = () => {\n    this.setState({\n      Title: \"\",\n      Description: \"\"\n    });\n  };\n\n  //To remove the data from the list\n  removeData = Id => {\n    this.props.dispatch(removeTodo(Id))\n  };\n\n  //To handle the data Update\n  handleUpdate = (Id) => {\n    const { dataLists } = this.props;\n    const targetObj = dataLists.filter(item => item.Id === Id)[0];\n\n    this.setState({\n      Id: targetObj.Id,\n      Title: targetObj.Title,\n      Description: targetObj.Description,\n      completed: targetObj.completed,\n      isEditing: true\n    });\n  };\n\n  handleCheckbox = () => {\n    this.setState({ completed: !this.state.completed })\n  }\n  //To save the updated data\n  saveUpdate = (e) => {\n    e.preventDefault();\n    const { Title, Description, Quantity, Id } = this.state;\n    const newData = {\n      Title,\n      Description,\n      Id,\n    }\n    this.props.dispatch(updateTodo(newData));\n  };\n\n  render() {\n    const { state, addData, handleChange, saveUpdate, removeData, handleUpdate, handleCheckbox } = this,\n      {\n        Id,\n        Title,\n        Description,\n        isEditing,\n        completed,\n      } = state;\n    const { dataLists } = this.props;\n    return (\n      <Grid container spacing={0}>\n        <Grid item ls={6} md={6} sm={12} xs={12}>\n          <CreateData\n            Id={Id}\n            Title={Title}\n            Description={Description}\n            Quantity={Quantity}\n            addData={addData}\n            handleChange={handleChange}\n            saveUpdate={saveUpdate}\n            isEditing={isEditing}\n            completed={completed}\n            handleCheckbox={handleCheckbox}\n          />\n        </Grid>\n        <Grid item ls={6} md={6} sm={12} xs={12}>\n          <DataLists\n            lists={dataLists}\n            removeData={removeData}\n            handleUpdate={handleUpdate}\n          />\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    dataLists: state.dataLists,\n  }\n}\n\nexport default connect(mapStateToProps)(MyTodos);\n"]},"metadata":{},"sourceType":"module"}